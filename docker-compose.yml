version: '3'

# TODO: сделать маппинг на конфиги 
services:
  postgres:
    image: postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ~/base/postgres:/var/lib/postgresql/data
  rabbitmq:
    image: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "user"
    ports:
      - "127.0.0.1:15672:15672"
      - "127.0.0.1:5672:5672"
  mongodb:
    image: mongo:latest
    ports:
      - "127.0.0.1:27017:27017"
    volumes:
      - ~/base/mongo:/data/db
  gateway:
    build: 
      context: ./python/gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - data
      - object
      - stats
      - users
      - companies
    links:
      - data
      - object
      - stats
      - users
      - companies
  data:
    restart: unless-stopped
    build:
      context: ./python/data
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - mongodb
    links:
      - rabbitmq
      - mongodb
  auth:
    restart: unless-stopped
    build:
      context: ./python/auth
      dockerfile: Dockerfile
  object:
    restart: unless-stopped
    build: 
      context: ./python/object
      dockerfile: Dockerfile
    depends_on:
      - postgres
    links:
      - postgres
  stats:
    restart: unless-stopped
    build: 
      context: ./python/stats
      dockerfile: Dockerfile
    depends_on:
      - data
    links:
      - data
  users:
    restart: unless-stopped
    build: 
      context: ./python/users
      dockerfile: Dockerfile
    depends_on:
      - mongodb
    links:
      - mongodb
  companies:
    restart: unless-stopped
    build: 
      context: ./python/companies
      dockerfile: Dockerfile
    depends_on:
      - mongodb
      - postgres
    links:
      - mongodb
      - postgres
  receiver:
    restart: unless-stopped
    build:
      context: ./python/receiver
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
  frontend:
    restart: unless-stopped
    environment:
      GOOGLE_API_MAPS_KEY: google_api_maps_key
    build:
      context: github.com/m4mcontroller/frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt/live/meter4.me/fullchain.pem:/etc/ssl/fullchain.pem
      - /etc/letsencrypt/live/meter4.me/privkey.pem:/etc/ssl/privkey.pem
      - ~/frontend-landing/:/usr/html/landing
